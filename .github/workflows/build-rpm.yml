name: Build RPM and publish repo

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  VERSION: ${{github.ref_name}}
  TARGET_REPO: ${{ secrets.TARGET_REPO }} # e.g. ashmit-kumar/autoship-deploy

permissions:
  contents: write

jobs:
  build-and-publish:
    # use an Amazon Linux 2 container so the produced RPM is compatible with Amazon Linux AMI
    runs-on: ubuntu-latest
    container:
      image: amazonlinux:2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Amazon Linux uses yum; install rpm build tools, createrepo and python3/pip
          yum -y install yum-utils rpm-build redhat-rpm-config createrepo git tar gzip python3 python3-pip
          yum -y clean all

      - name: Prepare rpmbuild dirs
        run: |
          mkdir -p rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

      - name: Create source tarball (with vendored wheels)
        run: |
          RAW_VERSION='${{ github.ref_name }}'
          # strip leading v if present
          VERSION="${RAW_VERSION#v}"
          echo "RAW_VERSION=$RAW_VERSION -> VERSION=$VERSION"

          # stage copy and vendor wheels into staged tree
          STAGEDIR=$(mktemp -d)
          cp -a autoship-scripts "${STAGEDIR}/autoship-scripts"

          mkdir -p "${STAGEDIR}/autoship-scripts/wheels"
          if [ -f autoship-scripts/requirements.txt ]; then
            python3 -m pip download -r autoship-scripts/requirements.txt -d "${STAGEDIR}/autoship-scripts/wheels"
          fi

          # create the source tarball containing scripts + wheels
          tar czf autoship-deploy-${VERSION}.tar.gz -C "${STAGEDIR}" autoship-scripts
          mv autoship-deploy-${VERSION}.tar.gz rpmbuild/SOURCES/
          ls -l rpmbuild/SOURCES/
          rm -rf "${STAGEDIR}"

      - name: Copy spec into SPECS
        run: |
          cp autoship-scripts/autoship-deploy.spec rpmbuild/SPECS/

      - name: Build RPM
        run: |
          # use topdir pointing at repo rpmbuild dir
          # VERSION variable was set earlier in this job (strip leading v)
          # set a reproducible Release using the run number
          rpmbuild -ba \
            --define "_topdir $PWD/rpmbuild" \
            --define "version ${VERSION}" \
            --define "release ${GITHUB_RUN_NUMBER}%{?dist}" \
            rpmbuild/SPECS/autoship-deploy.spec

      - name: Verify RPM produced
        run: |
          set -e
          RPM_COUNT=$(ls -1 rpmbuild/RPMS/*/*.rpm 2>/dev/null | wc -l || true)
          echo "RPM_COUNT=$RPM_COUNT"
          if [ "${RPM_COUNT:-0}" -eq 0 ]; then
            echo "ERROR: no RPM produced. Check rpmbuild logs above."
            ls -la rpmbuild || true
            exit 1
          fi

      - name: Prepare repo directory
        run: |
          mkdir -p repo
          # copy any built RPM (any arch)
          cp -v rpmbuild/RPMS/*/*.rpm repo/ || true
          ls -l repo || true

      - name: Create repodata
        run: |
          createrepo repo/

      - name: Push repo to gh-pages branch of target repo
        run: |
          # Publish the repo/ directory to this repository's gh-pages branch using the builtin GITHUB_TOKEN
          REPO=${{ github.repository }}
          TOKEN=${{ secrets.GITHUB_TOKEN }}

          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"
          TMPDIR=$(mktemp -d)
          cd $TMPDIR
          git init
          git remote add origin https://x-access-token:${TOKEN}@github.com/${REPO}.git
          git fetch origin || true
          git checkout -B gh-pages
          cp -r $GITHUB_WORKSPACE/repo/* .
          git add .
          git commit -m "Publish repo from workflow: $GITHUB_SHA" || true
          git push origin gh-pages --force

      - name: Done
        run: echo "RPM build and publish finished"
